---
// src/components/language_switcher.astro

// Langues disponibles
const languages = [
  { code: 'fr', label: 'FR' },
  { code: 'en', label: 'EN' },
  { code: 'de', label: 'DE' }
];

// Obtenir l'URL actuelle
const { pathname } = Astro.url;

// Détecter la langue actuelle
const langMatch = pathname.match(/^\/([a-z]{2})(\/|$)/);
const currentLang = langMatch ? langMatch[1] : 'fr';

// Fonction pour déterminer l'URL dans une autre langue
const getLocalizedPath = (langCode: string): string => {
  const pathWithoutLang = pathname.replace(/^\/[a-z]{2}/, '');
  let localizedPath = `/${langCode}${pathWithoutLang}`;
  
  if (!localizedPath.endsWith('/')) {
    localizedPath += '/';
  }
  
  return localizedPath;
};
---

<div class="relative inline-block text-left">
  <div class="flex items-center gap-2">
    {languages.map((lang, index) => (
      <>
        <button 
          class={`language-button text-sm transition-colors duration-200 ${
            lang.code === currentLang 
              ? 'text-(--color-primary) font-medium cursor-default' 
              : 'text-(--color-gray-600) hover:text-(--color-primary-hover) cursor-pointer'
          }`}
          data-lang={lang.code}
          data-url={getLocalizedPath(lang.code)}
          disabled={lang.code === currentLang}
        >
          {lang.label}
        </button>
        
        {index < languages.length - 1 && (
          <span class="text-gray-400">|</span>
        )}
      </>
    ))}
  </div>
</div>

<script>
  import { navigate } from 'astro:transitions/client';
  
  document.addEventListener('astro:page-load', function() {
    const languageButtons = document.querySelectorAll('.language-button:not([disabled])') as NodeListOf<HTMLButtonElement>;
    
    languageButtons.forEach(button => {
      button.addEventListener('click', async function() {
        const targetUrl = this.dataset.url;
        const targetLang = this.dataset.lang;
        
        if (!targetUrl || !targetLang) return;
        
        // Marquer explicitement que c'est un changement de langue
        sessionStorage.setItem('isLanguageSwitch', 'true');
        sessionStorage.setItem('languageSwitchScrollY', window.scrollY.toString());
        
        // Sauvegarder la langue préférée
        localStorage.setItem('preferredLanguage', targetLang);
        
        try {
          await navigate(targetUrl, {
            history: 'push'
          });
        } catch (error) {
          console.warn('Navigation échouée:', error);
          window.location.href = targetUrl;
        }
      });
    });
  });
  
  // Gestionnaire UNIQUEMENT pour les changements de langue
  document.addEventListener('astro:after-swap', () => {
    const isLanguageSwitch = sessionStorage.getItem('isLanguageSwitch');
    const savedScrollY = sessionStorage.getItem('languageSwitchScrollY');
    
    if (isLanguageSwitch === 'true' && savedScrollY) {
      // Restaurer la position SEULEMENT pour les changements de langue
      window.scrollTo({
        top: parseInt(savedScrollY, 10),
        behavior: 'instant'
      });
      
      // Nettoyer immédiatement
      sessionStorage.removeItem('isLanguageSwitch');
      sessionStorage.removeItem('languageSwitchScrollY');
    }
    // Pour toute autre navigation, laisser le comportement par défaut (scroll en haut)
  });
</script>

<style>
  .language-button {
    background: none;
    border: none;
    padding: 0;
    font: inherit;
  }
  
  .language-button:not(:disabled):hover {
    transform: translateY(-1px);
  }
  
  .language-button:disabled {
    opacity: 1;
  }
</style>