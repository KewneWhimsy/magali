---
// src/layouts/header.astro
import LanguageSwitcher from '../components/language_switcher.astro';
import OptimizeImage from '../components/optimize_image.astro';

// Récupérer le chemin actuel pour gérer l'état actif des liens
const { pathname } = Astro.url;

// Détecter la langue actuelle depuis l'URL
const langMatch = pathname.match(/^\/([a-z]{2})(\/|$)/);
const currentLang = langMatch ? langMatch[1] : 'fr';

// Traduction des labels de navigation pour ABC Gourmet
const navLabels = {
  fr: {
    menu: 'Menu',
    home: 'Accueil',
    expertise: 'Expertises & Services',
    training: 'Formation et ateliers',
    references: 'Références & témoignages',
    news: 'Actualités',
    contact: 'Contact'
  },
  en: {
    menu: 'Menu',
    home: 'Home',
    expertise: 'Expertise & Services', 
    training: 'Partners & workshops',
    references: 'References & testimonials',
    news: 'News',
    contact: 'Contact'
  },
  de: {
    menu: 'Menü',
    home: 'Startseite',
    expertise: 'Expertise & Dienstleistungen',
    training: 'Kunden und Workshops',
    references: 'Ergebnisse & Testimonials',
    news: 'Nachrichten',
    contact: 'Kontakt'
  }
};

// Utiliser la langue courante ou le français par défaut
const labels = navLabels[currentLang as keyof typeof navLabels] || navLabels.fr;
---

<header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50 transition-transform duration-300" id="main-header">
  <div class="max-w-7xl mx-auto px-4">
    <!-- Version mobile et tablette -->
    <div class="flex lg:hidden justify-between items-center py-2">
      <!-- Logo -->
      <div data-astro-transition-persist="header-logo">
        <a 
          href={`/${currentLang}/`}
          class="flex items-center hover:opacity-80 transition-opacity"
        >
          <OptimizeImage 
            src="/src/assets/img/logow_300x162.png"
            alt="ABC Gourmet Logo"
            class="h-10 w-auto"
            loading="eager"
          />
        </a>
      </div>

      <!-- Sélecteur de langue + Menu hamburger -->
      <div class="flex items-center gap-3">
        <LanguageSwitcher />
        
        <!-- Bouton menu hamburger -->
        <button 
          id="mobile-menu-btn"
          class="flex flex-col justify-center items-center w-8 h-8 text-gray-600 hover:text-[var(--color-primary)] transition-colors"
          aria-label={labels.menu}
          aria-expanded="false"
        >
          <span class="hamburger-line block w-6 h-0.5 bg-current mb-1.5 transition-all duration-300 origin-center"></span>
          <span class="hamburger-line block w-6 h-0.5 bg-current mb-1.5 transition-all duration-300 origin-center"></span>
          <span class="hamburger-line block w-6 h-0.5 bg-current transition-all duration-300 origin-center"></span>
        </button>
      </div>
    </div>

    <!-- Menu mobile (caché par défaut) -->
    <nav 
      id="mobile-menu" 
      class="lg:hidden bg-white border-t border-gray-200 absolute left-0 right-0 top-full shadow-lg opacity-0 invisible transform -translate-y-2 transition-all duration-300 ease-out"
    >
      <ul class="py-4 space-y-1">
        <li>
          <a 
            href={`/${currentLang}/`}
            class={`block px-4 py-3 text-gray-700 hover:bg-gray-50 hover:text-[var(--color-primary)] transition-colors border-l-4 border-transparent hover:border-[var(--color-primary)] ${pathname === `/${currentLang}/` ? 'text-[var(--color-primary)] border-[var(--color-primary)] bg-gray-50' : ''}`}
          >
            {labels.home}
          </a>
        </li>
        <li>
          <a 
            href={`/${currentLang}/expertise/`}
            class={`block px-4 py-3 text-gray-700 hover:bg-gray-50 hover:text-[var(--color-primary)] transition-colors border-l-4 border-transparent hover:border-[var(--color-primary)] ${pathname.includes('/expertise') ? 'text-[var(--color-primary)] border-[var(--color-primary)] bg-gray-50' : ''}`}
          >
            {labels.expertise}
          </a>
        </li>
        <li>
          <a 
            href={`/${currentLang}/training/`}
            class={`block px-4 py-3 text-gray-700 hover:bg-gray-50 hover:text-[var(--color-primary)] transition-colors border-l-4 border-transparent hover:border-[var(--color-primary)] ${pathname.includes('/training') ? 'text-[var(--color-primary)] border-[var(--color-primary)] bg-gray-50' : ''}`}
          >
            {labels.training}
          </a>
        </li>
        <li>
          <a 
            href={`/${currentLang}/references/`}
            class={`block px-4 py-3 text-gray-700 hover:bg-gray-50 hover:text-[var(--color-primary)] transition-colors border-l-4 border-transparent hover:border-[var(--color-primary)] ${pathname.includes('/references') ? 'text-[var(--color-primary)] border-[var(--color-primary)] bg-gray-50' : ''}`}
          >
            {labels.references}
          </a>
        </li>
        <li>
          <a 
            href={`/${currentLang}/news/`}
            class={`block px-4 py-3 text-gray-700 hover:bg-gray-50 hover:text-[var(--color-primary)] transition-colors border-l-4 border-transparent hover:border-[var(--color-primary)] ${pathname.includes('/news') ? 'text-[var(--color-primary)] border-[var(--color-primary)] bg-gray-50' : ''}`}
          >
            {labels.news}
          </a>
        </li>
        <li>
          <a 
            href={`/${currentLang}/contact/`}
            class={`block px-4 py-3 text-gray-700 hover:bg-gray-50 hover:text-[var(--color-primary)] transition-colors border-l-4 border-transparent hover:border-[var(--color-primary)] ${pathname.includes('/contact') ? 'text-[var(--color-primary)] border-[var(--color-primary)] bg-gray-50' : ''}`}
          >
            {labels.contact}
          </a>
        </li>
      </ul>
    </nav>

    <!-- Version desktop -->
    <div class="hidden lg:flex justify-between items-center">
      <!-- Logo / Nom de l'entreprise -->
      <div data-astro-transition-persist="header-logo">
        <a 
          href={`/${currentLang}/`}
          class="flex items-center gap-3 hover:opacity-80 transition-opacity mt-1 md:mt-0"
        >
          <OptimizeImage 
            src="/src/assets/img/logow_300x162.png"
            alt="ABC Gourmet Logo"
            class="h-12 w-auto"
            loading="eager"
          />
        </a>
      </div>
      
      <div class="flex items-center gap-4">
        <!-- Navigation principale -->
        <nav>
          <ul class="flex items-center gap-5">
            <li>
              <a 
                href={`/${currentLang}/`}
                class={`nav-link text-sm ${pathname === `/${currentLang}/` ? 'active' : ''}`}
              >
                {labels.home}
              </a>
            </li>
            <li>
              <a 
                href={`/${currentLang}/expertise/`}
                class={`nav-link text-sm ${pathname.includes('/expertise') ? 'active' : ''}`}
              >
                {labels.expertise}
              </a>
            </li>
            <li>
              <a 
                href={`/${currentLang}/training/`}
                class={`nav-link text-sm ${pathname.includes('/training') ? 'active' : ''}`}
              >
                {labels.training}
              </a>
            </li>
            <li>
              <a 
                href={`/${currentLang}/references/`}
                class={`nav-link text-sm ${pathname.includes('/references') ? 'active' : ''}`}
              >
                {labels.references}
              </a>
            </li>
            <li>
              <a 
                href={`/${currentLang}/news/`}
                class={`nav-link text-sm ${pathname.includes('/news') ? 'active' : ''}`}
              >
                {labels.news}
              </a>
            </li>
            <li>
              <a 
                href={`/${currentLang}/contact/`}
                class={`nav-link text-sm ${pathname.includes('/contact') ? 'active' : ''}`}
              >
                {labels.contact}
              </a>
            </li>
          </ul>
        </nav>
      </div>
      <!-- Sélecteur de langue -->
      <LanguageSwitcher />
    </div>
  </div>
</header>

<script>
  document.addEventListener('astro:page-load', function() {
    // Variables pour le header mobile
    const header = document.getElementById('main-header') as HTMLElement | null;
    const mobileMenuBtn = document.getElementById('mobile-menu-btn') as HTMLButtonElement | null;
    const mobileMenu = document.getElementById('mobile-menu') as HTMLElement | null;
    const hamburgerLines = document.querySelectorAll('.hamburger-line') as NodeListOf<HTMLElement>;
    
    // État du menu
    let isMenuOpen = false;
    
    // Fonction pour toggle le menu mobile
    function toggleMobileMenu(): void {
      if (!mobileMenu || !mobileMenuBtn) return;
      
      isMenuOpen = !isMenuOpen;
      
      // Mettre à jour l'attribut aria-expanded
      mobileMenuBtn.setAttribute('aria-expanded', isMenuOpen.toString());
      
      if (isMenuOpen) {
        // Ouvrir le menu
        mobileMenu.classList.remove('opacity-0', 'invisible', '-translate-y-2');
        mobileMenu.classList.add('opacity-100', 'visible', 'translate-y-0');
        
        // Animation hamburger vers X
        if (hamburgerLines.length >= 3) {
          hamburgerLines[0].style.transform = 'rotate(45deg) translate(5px, 5px)';
          hamburgerLines[1].style.opacity = '0';
          hamburgerLines[2].style.transform = 'rotate(-45deg) translate(7px, -6px)';
        }
      } else {
        // Fermer le menu
        mobileMenu.classList.remove('opacity-100', 'visible', 'translate-y-0');
        mobileMenu.classList.add('opacity-0', 'invisible', '-translate-y-2');
        
        // Reset hamburger
        if (hamburgerLines.length >= 3) {
          hamburgerLines[0].style.transform = 'none';
          hamburgerLines[1].style.opacity = '1';
          hamburgerLines[2].style.transform = 'none';
        }
      }
    }
    
    // Event listener pour le bouton menu
    if (mobileMenuBtn) {
      mobileMenuBtn.addEventListener('click', toggleMobileMenu);
    }
    
    // Fermer le menu quand on clique sur un lien
    if (mobileMenu) {
      const menuLinks = mobileMenu.querySelectorAll('a');
      menuLinks.forEach(link => {
        link.addEventListener('click', () => {
          if (isMenuOpen) {
            toggleMobileMenu();
          }
        });
      });
    }
    
    // Fermer le menu si on clique en dehors
    document.addEventListener('click', (e: Event) => {
      if (!mobileMenuBtn || !mobileMenu || !isMenuOpen) return;
      
      const target = e.target as HTMLElement;
      if (!mobileMenuBtn.contains(target) && !mobileMenu.contains(target)) {
        toggleMobileMenu();
      }
    });
    
    // Fermer le menu avec Escape
    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isMenuOpen) {
        toggleMobileMenu();
      }
    });
    
    // Scroll behavior pour masquer/afficher le header
    let lastScrollY = 0;
    let ticking = false;

    function updateHeader(): void {
      if (!header) return;
      
      const currentScrollY = window.scrollY;
      
      // Seulement sur mobile/tablette
      if (window.innerWidth < 1024) {
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
          // Scroll down - hide (mais fermer le menu d'abord)
          if (isMenuOpen) {
            toggleMobileMenu();
          }
          header.style.transform = 'translateY(-100%)';
        } else if (currentScrollY < lastScrollY) {
          // Scroll up - show
          header.style.transform = 'translateY(0)';
        }
      } else {
        // Sur desktop, toujours visible
        header.style.transform = 'translateY(0)';
      }
      
      lastScrollY = currentScrollY;
      ticking = false;
    }

    function requestTick(): void {
      if (!ticking) {
        requestAnimationFrame(updateHeader);
        ticking = true;
      }
    }

    // Écouter le scroll avec throttling
    window.addEventListener('scroll', requestTick, { passive: true });

    // Réinitialiser le header quand on redimensionne
    window.addEventListener('resize', () => {
      if (header) {
        header.style.transform = 'translateY(0)';
        lastScrollY = window.scrollY;
        
        // Fermer le menu mobile si on passe en desktop
        if (window.innerWidth >= 1024 && isMenuOpen) {
          toggleMobileMenu();
        }
      }
    });

    // Gérer les transitions de page Astro
    document.addEventListener('astro:before-preparation', () => {
      if (header) {
        header.style.transform = 'translateY(0)';
      }
      if (isMenuOpen) {
        toggleMobileMenu();
      }
    });
  });
</script>

<style>
  /* Styles pour le menu hamburger animé */
  .hamburger-line {
    transform-origin: center;
  }
  
  /* Animation smooth pour le menu déroulant */
  #mobile-menu {
    transition: opacity 300ms ease-out, visibility 300ms ease-out, transform 300ms ease-out;
  }
  
  /* Améliorer les performances sur mobile */
  @media (max-width: 1023px) {
    #main-header {
      will-change: transform;
    }
  }
</style>